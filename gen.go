// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the meaning of a word
	// (GET /words/{word})
	GetWordsWord(c *gin.Context, word string)
	// Store the word an its meaning as a flash card in Anki.
	// (POST /words/{word})
	PostWordsWord(c *gin.Context, word string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetWordsWord operation middleware
func (siw *ServerInterfaceWrapper) GetWordsWord(c *gin.Context) {

	var err error

	// ------------- Path parameter "word" -------------
	var word string

	err = runtime.BindStyledParameter("simple", false, "word", c.Param("word"), &word)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter word: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetWordsWord(c, word)
}

// PostWordsWord operation middleware
func (siw *ServerInterfaceWrapper) PostWordsWord(c *gin.Context) {

	var err error

	// ------------- Path parameter "word" -------------
	var word string

	err = runtime.BindStyledParameter("simple", false, "word", c.Param("word"), &word)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter word: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostWordsWord(c, word)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/words/:word", wrapper.GetWordsWord)

	router.POST(options.BaseURL+"/words/:word", wrapper.PostWordsWord)

	return router
}
